Ver mallas (en carpeta donde esten las mallas):

./viewer -o file.m3d
 where -o can be:
  -d: for mdl
  -m: for m3d

Ejecutar herramienta de generacion de mallas:

./mesher_roi -i FEMUR.mdl -s 2

-i input
-s numero de refinaciones
-o output (opcional)

Se genera un .m3d, se abre con el viewer usando -m en vez de -d

--------------------------- ESTRUCTURA DE BOUNDARY TEMPLATE ------------------------------

BoundaryTemplate1,2,3 -> PatternA,PatternB,PatternC
BoundaryTemplate4 -> PatternA,PatternB,PatternC,PatternD,PatternE,PatternF,PatternG

---------------------------------------------------------------------------------

Para compilar primero debes ejecutar make en la carpeta mesher_services y luego debes ir a la mesher_boundary. Ahí debes ejecutar:
%> cmake .
…
%> make

Eso va a generar el ejecutable mesher_boundary. Dentro de esa misma carpeta van dos inputs para prueba (cilindro y caja). Para generar una malla de nivel de refinamiento 3 (cantidad recursiva de veces de aplicar Octree) ejecutar:

Caso cilindro-caja:
./mesher_boundary cylinder.mdl hex_en.mdl 4 mi_malla_output
Caso femur-protesis:
./mesher_boundary FEMUR.mdl PROST.mdl 4 femur_protesis

1. Fijarse que la ventana activa de geomview sea la de la cámara.
2. presionar las teclas: “ae”. Eso activará la visualización de arcos.
3. presionar las teclas: “af”. Eso des-activará la visualización de caras.
4. presionar las teclas: “ab”. Eso des-activará la visualización de la Bounding-box (cubo que encierra la geometría).
5. presionar la tecla “r” para activar rotación y jugar con el mouse para rotar la figura.


Donde el 3 es por nivel de refinamiento y “mi_malla_output” es el nombre de salida. Para visualizar el resultado debes llamar al visualizador (viewer) pasándole como parámetro la malla recién generada:

%> path/viewer -m mi_malla_output.m3d

donde path es el path al viewer.

------------------------------------------------------------
cd Documentos
cd Memoria


Caso cilindro-caja:
./viewer -m mi_malla_output.m3d
Caso femur-protesis:
./viewer -m femur_protesis.m3d

Los octantes que dan error (hay dos baldosas visibles paralelas, esas no, la tercera) están en las coordenadas:

x: [-5,0]
y: [-5,0]
z (octante 1): [-5,-2]
z (octante 2): [-2,3]

Se encontró que el octante 2 tiene las siguientes coordenadas:
-3.54551 -3.51602 -1.5 <- punto xyz 
-3.54551 -3.51602 2.25 <- punto xyz 
-0.250001 -4.99013 2.25 <- punto xyz 
-0.250001 -4.99013 -1.5 <- punto xyz 
-4.98039 -0.31168 -1.5 <- punto xyz 
-4.98039 -0.31168 2.25 <- punto xyz 
-0.25 -0.25 2.25 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 

Se encontró el octante que comparte la cara "bugeada" del octante 1:
octante encontrado 
-3.54551 -3.51602 -1.5 <- punto xyz 
-4.98039 -0.31168 -1.5 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 
-0.250001 -4.99013 -1.5 <- punto xyz 
-4 -4 -5.25 <- punto xyz 

El último "octante" tiene sólo 5 nodos (pirámide). Es posible que sea un elemento perteneciente a un patrón de superficie.

Se confirma que pertenece a un patrón de superficie. Al octante 1 se le aplica el patrón 7a.

Se encontraron los nodos del octante 1
-4 -4 -5.25 <- punto xyz 
-3.54551 -3.51602 -1.5 <- punto xyz 
-0.250001 -4.99013 -1.5 <- punto xyz 
-0.25 -4 -5 <- punto xyz 
-4 -0.25 -5 <- punto xyz 
-4.98039 -0.31168 -1.5 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 
-0.25 -0.25 -5 <- punto xyz 


Se comprueba que los problemas estan en las caras del eje z.

Se conprueba que son 2 los octantes con el conflicto y uno de ellos tiene conflictos en ambas caras, de ahi que se vean 3 caras en el visualizador. El otro octante tiene un patron desconocido. Se investigará a cual corresponde.

Se comprueba que de las 10 piramides conflictivas que aparecian en el debugging, 9 son eliminadas y 1 genera una de las caras invalidas encontradas.

posibles elementos de las caras desconocidas:

octante encontrado 
3.52932 3.53122 -1.5 <- punto xyz 
3.5 -0.25 -1.5 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 
-0.25 3.5 -1.5 <- punto xyz 
3.52932 3.53122 -5.25 <- punto xyz 
octante encontrado 
-0.25 3.5 -1.5 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 
-0.25 -0.25 -5 <- punto xyz 
-0.25 3.5 -5 <- punto xyz 
3.52932 3.53122 -5.25 <- punto xyz 
octante encontrado 
3.5 -0.25 -5 <- punto xyz 
-0.25 -0.25 -5 <- punto xyz 
-0.25 -0.25 -1.5 <- punto xyz 
3.5 -0.25 -1.5 <- punto xyz 
3.52932 3.53122 -5.25 <- punto xyz

buscar en los rangos
x: -0.5 3.6
y: -0.5 3.6
z: -6 3

Patrones de la cara o baldosa z inferior:

7a superficie, en el rango:
x: -0.5 3.6
y: -0.5 3.6
z: -5.5 -1.5

6a interno, en el rango:
x: -0.5 3.6
y: -0.5 3.6
z: -1.5 3

Patrones de la cara o baldosa 7 superior:
6a interno, en el rango:
x: -0.5 3.6
y: -0.5 3.6
z: -1.5 2.25

7a superficie, en el rango:
x: -0.5 3.6
y: -0.5 3.6
z: 2.25 6

Solucion NO GENERAL:Se aplico un filtro a la lista de elementos conflictivos, se redujo de 64 a 16

Solución GENERAL: Se aplica filtro a todos los elementos en base a IOState, no hay necesidad de entrar al ver los patrones, ya que es posible anticipar si la cara debería ser dividida por un patron interno, por lo que se elimina el elemento de la cara conflictiva y se reemplaza por los elementos que generen una diagonal en el sentido respectivo.

----------------------------------------------------------------------------------
Casos nivel 4:

Caso 1:
x: [-4,0]
y: [-4,0]
z (octante 1 y 2): [-3,2]

-3.52122 -3.53882 -0.75<- puntos xyz 
-1.375 -3.25 -0.75<- puntos xyz 
-1.375 -3.25 -2.625<- puntos xyz 
-3.52122 -3.53882 -2.625<- puntos xyz 
-3.25 -1.375 -0.75<- puntos xyz 
-1.375 -1.375 -0.75<- puntos xyz 
-1.375 -1.375 -2.625<- puntos xyz 
-3.25 -1.375 -2.625<- puntos xyz 

Cara en conflicto
-1.375 -3.25 -0.75
-3.52122 -3.53882 -0.75
-3.25 -1.375 -0.75
-1.375 -1.375 -0.75

Este caso se produjo debido a que el vector border del octante, que contiene true o false dependiendo si se encuentra en la malla i o no, estaba desactualizado. El octante en problemas tenía para ambas mallas falso, lo que significaba que se encontraba fuera de ambas mallas, cuando esto había dejado de ser cierto en operaciones anteriores a applyboundarytemplates. La solución fue actualizar el vector border de todos los elementos antes de ingresar a dicha función. Se solucionaron todos los casos con dicho problema.

Caso 2:
X (octante 1 y 2): [-5.5,0]
y: [-4,0]
z: [-5,-1]

7a nuevo lalda!
-5.125 -3.25 -5<- puntos xyz 
-5.125 -3.25 -2.625<- puntos xyz 
-3.52122 -3.53882 -2.625<- puntos xyz 
-3.52122 -3.53882 -4.5<- puntos xyz 
-4.83119 -1.27954 -4.5<- puntos xyz 
-4.83119 -1.27954 -2.625<- puntos xyz 
-3.25 -1.375 -2.625<- puntos xyz 
-3.25 -1.375 -5<- puntos xyz 
6a octante 1 
-3.52122 -3.53882 -2.625<- puntos xyz 
-1.375 -3.25 -2.625<- puntos xyz 
-1.375 -3.25 -5<- puntos xyz 
-3.52122 -3.53882 -4.5<- puntos xyz 
-3.25 -1.375 -2.625<- puntos xyz 
-1.375 -1.375 -2.625<- puntos xyz 
-1.375 -1.375 -5<- puntos xyz 
-3.25 -1.375 -5<- puntos xyz 

cara en conflicto

-3.52122 -3.53882 -2.625<- puntos xyz 
-3.52122 -3.53882 -4.5<- puntos xyz 
-3.25 -1.375 -2.625<- puntos xyz 
-3.25 -1.375 -5<- puntos xyz 

Este caso se produjo por un error en el etiquetado de nodos como "interno" y "externo" en los patrones internos, se etiquetaban como si hubiese sólo una superficie y se veía si el nodo estaba dentro o no de ella, en el caso de los patrones internos, se debe considerar un nodo interno cuando está dentro de ambas superficies. Esto generó que para el caso encontrado, se aplicara un patrón 6a interno en lugar de uno 3X. Se corrigio en EnhancedElements.cpp, descomentando una parte y comentando otra.

Caso 3:
X (octante 1 y 2): [-6,0]
y: [2,4.8]
z: [-5,-2]

6a externo 
-5.125 4.25 -5<- puntos xyz 
-5.125 4.25 -2.625<- puntos xyz 
-5.125 2.375 -2.625<- puntos xyz 
-5.125 2.375 -5<- puntos xyz 
-3.03928 3.95997 -4.5<- puntos xyz 
-3.03928 3.95997 -2.625<- puntos xyz 
-3.25 2.375 -2.625<- puntos xyz 
-3.25 2.375 -5<- puntos xyz 
3a interno 
-1.375 2.375 -2.625<- puntos xyz 
-3.25 2.375 -2.625<- puntos xyz 
-3.03928 3.95997 -2.625<- puntos xyz 
-1.50723 4.765 -2.625<- puntos xyz 
-1.375 2.375 -5<- puntos xyz 
-3.25 2.375 -5<- puntos xyz 
-3.03928 3.95997 -4.5<- puntos xyz 
-1.375 4.25 -5<- puntos xyz 

cara conflictiva:
-3.03928 3.95997 -4.5<- puntos xyz 
-3.03928 3.95997 -2.625<- puntos xyz 
-3.25 2.375 -2.625<- puntos xyz 
-3.25 2.375 -5<- puntos xyz 

En este caso el elemento conflictivo es el hexaedro del 6a, que debe ser dividido para que respete las reglas de los patrones internos. Se usará el mismo criterio que las pirámides, pero en este caso, se dividirá en una pirámide y dos tetraedros.

Caso 4:

El problema del caso 4 fue en el patron 3a interno, que estaba mal implementado, la ultima pirámide estaba contruida así:

		//managing outside elements	
		pyramid2[0] = all[4];
		pyramid2[1] = all[7];
		pyramid2[2] = all[6];
		pyramid2[3] = all[5];
		pyramid2[4] = all[2];
		
		newsubs_out.push_back(pyramid3);

La variable pyramid3 no tenía nada, ya que el error fue llenar la piramide anterior con los elementos que le correspondían (puso por error 2 en lugar de 3), se corrigio así:

		//managing outside elements
		//Agregado por javier, originalmente decia "pyramid2[0] =...", lo cambie por "pyramid3[0]=..."	
		pyramid3[0] = all[4];
		pyramid3[1] = all[7];
		pyramid3[2] = all[6];
		pyramid3[3] = all[5];
		pyramid3[4] = all[2];
		
		newsubs_out.push_back(pyramid3);

