#include "Vector3D.h"

namespace TxGeom
{
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D::Vector3D() : Coord3D( 0, 0, 0, 0 )
	{
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D::Vector3D( double pX, double pY, double pZ ) : Coord3D( pX, pY, pZ, 0 )
	{
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D::Vector3D( const double pV[3] ) : Coord3D( pV[0], pV[1], pV[2], 0 )
	{
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	double Vector3D::operator*( const Vector3D & pV ) const
	{
		return X()*pV.X() + Y()*pV.Y() + Z()*pV.Z();
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	double Vector3D::SquaredNorm() const
	{
		return operator*(*this);
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	double Vector3D::Norm() const
	{
		return sqrt( SquaredNorm() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	void Vector3D::Normalize()
	{
		double lNorm = Norm();

		// Normalize
		mV[0] /= lNorm;
		mV[1] /= lNorm;
		mV[2] /= lNorm;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator^( const Vector3D & pV ) const
	{
		return Vector3D( Y()*pV.Z()-Z()*pV.Y(), Z()*pV.X()-X()*pV.Z(), X()*pV.Y()-Y()*pV.X() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator/( double pK ) const
	{
		return Vector3D( X()/pK, Y()/pK, Z()/pK );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator/=( double pK )
	{
		this->X() /= pK;
		this->Y() /= pK;
		this->Z() /= pK;
		
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator+() const
	{
		return Vector3D( +X(), +Y(), +Z() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator-() const
	{
		return Vector3D( -X(), -Y(), -Z() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator+( const Vector3D & pV ) const
	{
		return Vector3D( X()+pV.X(), Y()+pV.Y(), Z()+pV.Z() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D Vector3D::operator-( const Vector3D & pV ) const
	{
		return Vector3D( X()-pV.X(), Y()-pV.Y(), Z()-pV.Z() );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	const Vector3D & Vector3D::operator+=( const Vector3D & pV )
	{
		X() += pV.X();
		Y() += pV.Y();
		Z() += pV.Z();
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	const Vector3D & Vector3D::operator-=( const Vector3D & pV )
	{
		X() -= pV.X();
		Y() -= pV.Y();
		Z() -= pV.Z();
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	const Vector3D & Vector3D::operator*=( double pK )
	{
		X() *= pK;
		Y() *= pK;
		Z() *= pK;
		return *this;
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------

	Vector3D Vector3D::operator*( double pK ) const
	{
		return Vector3D( X()*pK, Y()*pK, Z()*pK );
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D operator*( double pK, const Vector3D & pV )
	{
		return pV*pK;
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D operator/( double pK, const Vector3D & pV )
	{
		return pV/pK;
	}
}