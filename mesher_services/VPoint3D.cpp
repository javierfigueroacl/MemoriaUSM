#include "VPoint3D.h"

namespace TxGeom
{
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	VPoint3D::VPoint3D(): Coord3D( 0, 0, 0, 1 )
	{
	}
	
	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	VPoint3D::VPoint3D( double pX, double pY, double pZ ) : Coord3D( pX, pY, pZ, 1 )
	{
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	double VPoint3D::SquaredDistanceTo( const VPoint3D & pB ) const
	{
		double DX = X() - pB.X();
		double DY = Y() - pB.Y();
		double DZ = Z() - pB.Z();
		return DX*DX + DY*DY + DZ*DZ;
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	double VPoint3D::DistanceTo( const VPoint3D & pB ) const
	{
		return sqrt( SquaredDistanceTo(pB) );
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	Vector3D VPoint3D::operator-( const VPoint3D & pB ) const
	{
		return Vector3D( X()-pB.X(), Y()-pB.Y(), Z()-pB.Z() );
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	VPoint3D VPoint3D::operator+( const Vector3D & pV ) const
	{
		return VPoint3D( X()+pV.X(), Y()+pV.Y(), Z()+pV.Z() );
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	VPoint3D VPoint3D::operator-( const Vector3D & pV ) const
	{
		return VPoint3D( X()-pV.X(), Y()-pV.Y(), Z()-pV.Z() );
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	const VPoint3D & VPoint3D::operator+=( const Vector3D & pV )
	{
		X() += pV.X();
		Y() += pV.Y();
		Z() += pV.Z();
		return *this;
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	const VPoint3D & VPoint3D::operator-=( const Vector3D & pV )
	{
		X() -= pV.X();
		Y() -= pV.Y();
		Z() -= pV.Z();
		return *this;
	}

	//--------------------------------------------------------------------------------
	//--------------------------------------------------------------------------------
	/*VPoint3D operator*( const Matrix & pMat, const VPoint3D & pV )
	{
		VPoint3D lProd;
		pV.MultiplyTo( pMat, lProd );
		return lProd;
	}*/
}