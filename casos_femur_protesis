Caso cilindro-caja:
./mesher_boundary cylinder.mdl hex_en.mdl 4 mi_malla_output
./viewer -m mi_malla_output.m3d
Caso femur-protesis:
./mesher_boundary FEMUR.mdl PROST.mdl 4 femur_protesis
./viewer -m femur_protesis.m3d

-- Nivel 4 --

Caso 1: 
x: [-60,-30]
y: [-20,-5]
z: [25,50]

Elementos involucrados:

4a externo <- i=147
-56.3136 -19.403 36.2065<- puntos xyz 
-56.3136 -19.403 48.5568<- puntos xyz 
-43.9633 -19.403 48.5568<- puntos xyz 
-43.9633 -19.403 36.2065<- puntos xyz 
-55.8981 -7.01613 36.3407<- puntos xyz 
-58.9102 -7.27726 48.0725<- puntos xyz 
-43.9633 -7.05271 48.5568<- puntos xyz 
-43.9658 -10.6054 36.1394<- puntos xyz

Este caso se origina por hexaedros generados por patrones de superficie (octantes no divididos en realidad) que dado que tienen puntos fuera de ambas superficies, son ignorados por los patrones internos, lo cual genera inconsistencias. Lo que se hizo fue abarcar exclusivamente los hexaedros que tuvieran algun nodo fuera de toda superficie y algun nodo en ambas superficies, permitiéndoles que se les implemente un patrón interno, de forma de eliminar inconsistencias con elementos vecinos:

Archivos modificados:
enhancedelements.cpp, se comentó en bool EnhancedElement::applyBoundaryTemplates:
		//COMENTADO POR JAVIER
		/*if(!insideBorder(meshpoints)){
			return false;
		}*/

mesher.cpp:

			else if (points_ele.size() == 8){
				bool inall=false,outall=false;
				for(unsigned int k=0; k<points_ele.size();k++)
				if(points.at(points_ele[k]).getIOState(0) == true and points.at(points_ele[k]).getIOState(1) == true){
				inall=true;
				}
				else if(points.at(points_ele[k]).getIOState(0) == false and points.at(points_ele[k]).getIOState(1) == false){
				outall=true;
				}

				if(inall== true and outall==true) surf_conf=true;
			
			}
			///////////////////////////////////////////////////////////////

			//IF AGREGADO POR JAVIER
			if(surf_conf == false)
			if (!elements[i].insideBorder(points)) {
				newele.push_back(elements[i]);
				continue;
			}
			
			//IF AGREGADO POR JAVIER
			bool found = false;
			unsigned int intersected_surf;
			for (unsigned int j=0; j<n_meshes; j++) {
				if (elements[i].getBorderState(j)) {
					intersected_surf = j;
					found = true;
					break;
				}
			}
			//IF AGREGADO POR JAVIER
			if(surf_conf == false)
			if (!found) {
				std::cout << "Warning in Mesher::applyBoundaryTemplates :";
				std::cout << " element doesn't intersect inner surface\n";
				newele.push_back(elements[i]);
				continue;
			}

Caso 2: 
x: [-60,-40]
y: [-20,10]
z: [45,70]

Se expandió los casos de prismas a 2 nodos en ambas superficies.

Archivos modificados:
Todos los casos de división de elementos inválidos están ahora en la clase fixconflictingelements, fixprismMandatoryElements y los fixprismPatternX de EnhancedElement.cpp

Caso 3:

x:[-50,-25]
y:[-20,10]
z:[5,30]

5a 
-43.4588 -6.97377 11.8757<- puntos xyz 
nodo 0 dentro de superficie 1
-34.5202 -7.05271 12.9595<- puntos xyz 
nodo 1 dentro de superficie 2
-29.5801 -7.05271 22.8398<- puntos xyz 
nodo 2 dentro de superficie 2
-44.0262 -10.314 23.761<- puntos xyz 
nodo 3 dentro de superficie 1
-43.9633 -19.403 11.5059<- puntos xyz 
nodo 4 dentro de superficie 1
-31.613 -19.403 11.5059<- puntos xyz 
-31.613 -19.403 23.8562<- puntos xyz 
-43.9633 -19.403 23.8562<- puntos xyz 


6a externo 
-29.5801 5.29759 22.8398<- puntos xyz 
-43.916 2.65381 23.75<- puntos xyz 
nodo 1 dentro de superficie 1
-42.0876 2.45157 12.866<- puntos xyz 
nodo 2 dentro de superficie 1
-31.3961 7.32947 9.68314<- puntos xyz 
-29.5801 -7.05271 22.8398<- puntos xyz 
nodo 4 dentro de superficie 2
-44.0262 -10.314 23.761<- puntos xyz 
nodo 5 dentro de superficie 1
-43.4588 -6.97377 11.8757<- puntos xyz 
nodo 6 dentro de superficie 1
-34.5202 -7.05271 12.9595<- puntos xyz 
nodo 7 dentro de superficie 2

Cara conflictiva:
-43.4588 -6.97377 11.8757<- puntos xyz 
-34.5202 -7.05271 12.9595<- puntos xyz 
-29.5801 -7.05271 22.8398<- puntos xyz 
-44.0262 -10.314 23.761<- puntos xyz

 Elemento encontrado 123 
-29.5801 -7.05271 22.8398 <- punto xyz 
nodo 0 dentro de superficie 2
-44.0262 -10.314 23.761 <- punto xyz 
nodo 1 dentro de superficie 1
-29.5801 5.29759 22.8398 <- punto xyz 
-34.5202 -7.05271 12.9595 <- punto xyz 
nodo 3 dentro de ambas superficies
-43.4588 -6.97377 11.8757 <- punto xyz 
nodo 4 dentro de ambas superficies
-31.3961 7.32947 9.68314 <- punto xyz 
123 d 

El problema en este caso fueron los patrones especiales en el mesher originar que trabajaban las piramides, prismas y tetraedros que reciben en applyBoundaryTemplates. No tengo certeza de la función real de estos patrones, pero al parecer intentaban enfrentar los casos inválidos entre patrones externos y internos entre estos elementos. Sin embargo, dichas funciones generan errores ya que dividian elementos que no correspondían ser divididos. Al comentar dicho patron para las pirámides, el problema se solucionó.

Archivos modificados:
enhancedelements.cpp, se hizo un cambio en bool EnhancedElement::applyBoundaryTemplates:

Original:

		if (pointindex.size()==5) {
			BoundaryTemplatePyramid btpy;
			return btpy.getSubelements(pointindex,inpts,newsub,newsub_out);
		}

Cambio:

		if (pointindex.size()==5) {
			return false;
			//BoundaryTemplatePyramid btpy;
			//return btpy.getSubelements(pointindex,inpts,newsub,newsub_out);
		}


